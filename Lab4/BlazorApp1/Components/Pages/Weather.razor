@page "/weather"

@rendermode InteractiveServer
<h1>Weather</h1>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
    @if (warmDays>0)
    {
        <p><em>Warm days: @warmDays</em></p>
        <button class="btn btn-primary" @onclick="Filtruj">Filter &gt; 15°C</button>
        <button class="btn btn-primary" @onclick="RestoreForecasts">Restore</button>
    }
        <input
    class="form-control" @oninput="@Input" />
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? originalForecasts;
    private int warm = 15;
    private int warmDays;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        // save to original
        originalForecasts = forecasts.ToArray();
        // foreach (var forecast in forecasts) {
        //     if (forecast.TemperatureC > warm){
        //         warmDays += 1; 
        //     }
        // }
        warmDays = forecasts.Count(f => f.TemperatureC > warm);
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private void Filtruj()
    {

        if (forecasts is not null)
        {
            forecasts = forecasts.Where(f => f.TemperatureC > warm).ToArray();
        }
    }

    private void RestoreForecasts()
    {
        if (originalForecasts is not null)
        {
            forecasts = originalForecasts.ToArray();
            warmDays = forecasts.Count(f => f.TemperatureC > warm);
        }
    }

    private void Input(ChangeEventArgs args)
    {
        string text = args.Value?.ToString() ?? "";
            forecasts = originalForecasts
                .Where(f => f.Summary != null && f.Summary.Contains(text, StringComparison.OrdinalIgnoreCase))
                .ToArray();
        // ew aktualizacja cieplych dni
        warmDays = forecasts.Count(f => f.TemperatureC > warm);
    }
}
